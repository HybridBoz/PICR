"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Comment {
  comment: String
  file: File
  id: ID
  systemGenerated: Boolean!
  timestamp: DateTime!
  user: User
}

enum CommentPermissions {
  edit
  none
  read
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File implements FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  latestComment: DateTime
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

enum FileFlag {
  approved
  none
  rejected
}

interface FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  latestComment: DateTime
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

enum FileType {
  File
  Image
  Video
}

type Folder {
  files: [FileInterface!]!
  heroImage: Image
  id: ID!
  name: String!
  parentId: ID
  parents: [Folder!]!
  permissions: FolderPermissions
  subFolders: [Folder!]!
  totalFiles: Int!
  totalFolders: Int!
  totalImages: Int!
  totalSize: String!
}

enum FolderPermissions {
  Admin
  None
  View
}

type Image implements FileInterface {
  blurHash: String!
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  imageRatio: Float
  latestComment: DateTime
  metadata: ImageMetadataSummary
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

type ImageMetadataSummary {
  Aperture: Float
  Artist: String
  Camera: String
  DateTimeEdit: String
  DateTimeOriginal: String
  ExposureTime: Float
  Height: Int
  ISO: Float
  Lens: String
  Rating: Int
  Width: Int
}

type Mutation {
  addComment(comment: String, flag: FileFlag, id: ID!, nickName: String, rating: Int): FileInterface!
  auth(password: String!, user: String!): String!
  editAdminUser(commentPermissions: CommentPermissions, enabled: Boolean, folderId: ID, id: ID, name: String, password: String, username: String): User!
  editFolder(folderId: ID!, heroImageId: ID): Folder!
  editUser(commentPermissions: CommentPermissions, enabled: Boolean, folderId: ID, id: ID, name: String, uuid: String): User!
  generateThumbnails(folderId: ID): Boolean!
  generateZip(folderId: ID): String!
}

type Query {
  admins: [User!]!
  allFolders(id: ID!): [Folder]!
  comments(fileId: ID, folderId: ID): [Comment!]!
  file(id: ID!): FileInterface!
  folder(id: ID!): Folder!
  me: User
  searchFiles(folderId: ID, query: String!): [File!]!
  searchFolders(folderId: ID, query: String!): [Folder!]!
  serverInfo: ServerInfo
  tasks(folderId: ID): [Task!]!
  user(id: ID!): User!
  users(folderId: ID!, includeChildren: Boolean, includeParents: Boolean): [User!]!
}

type ServerInfo {
  cacheSize: BigInt!
  databaseUrl: String!
  dev: Boolean!
  host: String!
  mediaSize: BigInt!
  usePolling: Boolean!
  version: String!
}

type Task {
  folder: Folder
  id: ID
  name: String!
  startTime: String
  status: String
  step: Int
  totalSteps: Int
}

type User {
  commentPermissions: CommentPermissions
  enabled: Boolean
  folder: Folder
  folderId: ID!
  id: ID
  name: String
  username: String
  uuid: String
}

type Video implements FileInterface {
  duration: Float
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  imageRatio: Float
  latestComment: DateTime
  metadata: VideoMetadataSummary
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

type VideoMetadataSummary {
  AudioCodec: String
  AudioCodecDescription: String
  Bitrate: Int
  Duration: Float
  Format: String
  Framerate: Float
  Height: Int
  VideoCodec: String
  VideoCodecDescription: String
  Width: Int
}