"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File implements FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  folderId: ID!
  id: ID!
  name: String!
  type: FileType!
}

interface FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  folderId: ID!
  id: ID!
  name: String!
  type: FileType!
}

enum FileType {
  File
  Image
  Video
}

type Folder {
  files: [FileInterface!]!
  id: ID!
  name: String!
  parentId: ID
  parents: [Folder!]!
  permissions: FolderPermissions
  subFolders: [Folder!]!
  totalFiles: Int!
  totalFolders: Int!
  totalImages: Int!
  totalSize: String!
}

enum FolderPermissions {
  Admin
  None
  View
}

type Image implements FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  folderId: ID!
  id: ID!
  imageRatio: Float
  metadata: MetadataSummary
  name: String!
  type: FileType!
}

type MetadataSummary {
  Aperture: Float
  Artist: String
  Camera: String
  DateTimeEdit: String
  DateTimeOriginal: String
  ExposureTime: Float
  ISO: Float
  Lens: String
}

type Mutation {
  auth(password: String!, user: String!): String!
  editAdminUser(enabled: Boolean, folderId: ID, id: ID, name: String, password: String, username: String): User!
  editUser(enabled: Boolean, folderId: ID, id: ID, name: String, uuid: String): User!
  generateThumbnails(folderId: ID): Boolean!
  generateZip(folderId: ID): String!
}

type Query {
  admins: [User!]!
  allFolders(id: ID!): [Folder]!
  file(id: ID!): FileInterface!
  folder(id: ID!): Folder!
  me: User
  tasks(folderId: ID): [Task!]!
  user(id: ID!): User!
  users(folderId: ID!, includeParents: Boolean): [User!]!
}

type Task {
  folder: Folder
  id: ID
  name: String!
  startTime: String
  status: String
  step: Int
  totalSteps: Int
}

type User {
  enabled: Boolean
  folder: Folder
  folderId: ID!
  id: ID
  name: String
  username: String
  uuid: String
}

type Video implements FileInterface {
  duration: Float
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  folderId: ID!
  id: ID!
  imageRatio: Float
  metadata: MetadataSummary
  name: String!
  type: FileType!
}